fastlane_version "2.129.0"
default_platform :ios

desc "Run unit tests"
lane :tests do
  sh("rm", "-rf", "test_output")
  scan(
    package_path: ".", # This makes swift package testing possible without a pbxproj or xcworkspace file
    scheme: "Paysafe-Package",
    devices: ["iPhone 14 Pro"],
    code_coverage: true,
    result_bundle_path: "fastlane/test_output/Paysafe-Package.xcresult",
  )
end

desc "SwiftLint"
lane :lint do
  sh "mkdir -p sonar-reports"
  swiftlint(
    mode: :lint, # SwiftLint mode: :lint (default) or :autocorrect
    output_file: "./fastlane/sonar-reports/swiftlint.json", # The path of the output file (optional)
    config_file: "./.swiftlint.yml", # The path of the configuration file (optional)
    ignore_exit_status: true, # Allow fastlane to continue even if SwiftLint returns a non-zero exit status
    reporter: "json" #Output reporter - json can be imported into SonarQube
  )
end

desc "SonarQube scan"
lane :sonarqube do |options|
  token = ENV['SONAR_AUTH_TOKEN']
  UI.user_error!("You should pass auth token via env variable SONAR_AUTH_TOKEN") if token.nil?
 
  # install xcresultparser to parse the xcresult and get the test coverage
  # https://github.com/a7ex/xcresultparser
  sh "brew tap a7ex/homebrew-formulae"
  sh "brew install xcresultparser"
 
  # Create an xml file in generic code coverage xml format
  sh "mkdir -p sonar-reports"
  puts "current directory: " + Dir.pwd
  sh "xcresultparser -c -o xml ./test_output/Paysafe-Package.xcresult > ./sonar-reports/coverage.xml"
  
  if options[:pull_request_key].nil? || options[:pull_request_key].empty?
    branch_name = options[:branch_name]
  else
    pull_request_branch = options[:branch_name]
    pull_request_base = options[:pull_request_base]
    pull_request_key = options[:pull_request_key]
  end


  sonar(
      project_key: "com.paysafe.psp:paysafe-ph-mobile-sdk-ios",
      project_name: "paysafe-ph-mobile-sdk-ios",
      project_version: "0.0.1",
      sources_path: "Sources",
      sonar_login: token,
      branch_name: branch_name,
      pull_request_key: pull_request_key,
      pull_request_base: pull_request_base,
      pull_request_branch: pull_request_branch,
      sonar_url: "https://sonar.neterra.paysafe.com/",
      sonar_runner_args: "-Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=360 -Dsonar.cfamily.build-wrapper-output.bypass=true -Dsonar.swift.coverage.reportPaths=fastlane/sonar-reports/coverage.xml -Dsonar.coverageReportPaths=fastlane/sonar-reports/coverage.xml -Dsonar.swift.swiftLint.report=fastlane/sonar-reports/swiftlint.json"
  )
 
  if is_ci()
    cache_sonar_in_bitrise()
  end
end

desc "Push the current branch to GitHub repository"
lane :push_to_github do
  # Define your GitHub repository and Access Token
  github_repo = ENV['GITHUB_REPOSITORY'] # format: username/repo
  github_token = ENV['GITHUB_TOKEN']
 
  # Ensure the GitHub token is available
  unless github_repo
    UI.error("GitHub repo not found in environment variables")
    return
  end

  # Ensure the GitHub token is available
  unless github_token
    UI.error("GitHub Token not found in environment variables")
    return
  end

  version = File.read("../version.properties").split("=")[1]
  puts "version: " + version
  
  unless version
    UI.error("Version is not found in version.properties")
    return
  end

  # Create a new directory for the GitHub repo clone
  github_clone_dir = "./../../github_clone_ios"
  sh "rm -rf #{github_clone_dir}"
  sh "mkdir #{github_clone_dir}"

  git_url = "https://#{github_token}@github.com/#{github_repo}.git"
  tag_name = "v#{version}"

  # Clone the GitHub repo into the new directory
  Dir.chdir(github_clone_dir) do
    sh "git clone #{git_url} ."
  end

  # Remove the .git folder from the current directory
  sh "rm -rf ../.git"

  # Copy the contents to the cloned GitHub repo
  sh "cp -rf ../ #{github_clone_dir}"

  # Change directory to the cloned GitHub repo
  Dir.chdir(github_clone_dir) do
    # Add all changes
    sh "git add ."

    # Commit changes
    sh "git config user.email svc_github_committer@paysafe.com"
    sh "git config user.name PaysafeAutoCommitter"
    sh "git commit -m '#{tag_name}'"

    # Push changes to GitHub
    sh "git push origin main --follow-tags"

    # Create local tag
    sh "git tag #{tag_name}"
    # Push tag to GitHub
    sh "git push origin main --follow-tags"

    # Create release on GitHub
    set_github_release(
      repository_name: github_repo,
      api_token: github_token,
      name: version,
      tag_name: tag_name,
      description: "#{tag_name} release",
    )
  end
  
  UI.message("Successfully pushed to GitHub.")
end
